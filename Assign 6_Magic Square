//============================================================================
// Name        : PA #6 Magic Square
// Author      : Elise Zur
//============================================================================

#include<iostream>
using namespace std;

const int ROWS = 3;
const int COLS = 3;
const int MIN  = 1;
const int MAX  = 9;

void showResult(int[][COLS]);
void showArray(int[][COLS]);
bool isMagicSquare(int[][COLS]);
bool checkRange(int[][COLS]);
bool checkUnique(int[][COLS]);
bool checkRowSum(int[][COLS]);
bool checkColSum(int[][COLS]);
bool checkDiagSum(int[][COLS]);

int main()
{
	int magicArray[ROWS][COLS] = { {4, 9, 2},
								   {3, 5, 7},
								   {8, 1, 6} };

	int normalArray[ROWS][COLS] = { {10, 2, 3},
								    {4, 15, 6},
								    {7, 8, -8} };

	showArray(normalArray);
	showResult(normalArray);
	showArray(magicArray);
	showResult(magicArray);

	return 0;
}

void showResult(int values[][COLS])
{   if (isMagicSquare(values))
		cout << "This is a Lo Shu magic square.\n\n";
	else
		cout << "This is not a Lo Shu magic square.\n\n";
}

void showArray(int values[][COLS])
{
   for (int row = 0; row < ROWS; row++)
   {
	   for (int col = 0; col < COLS; col++)
		   cout << values[row][col] << " ";
	   cout << endl;
   }
}

bool isMagicSquare(int array[][COLS])
{
	if(checkRange(array) and checkUnique(array) and
	   checkRowSum(array) and checkColSum(array) and
	   checkDiagSum(array))
		return true;
	else
		return false;
}

// *COMMENT ONE*
// The checkRange() function accepts a 2D int-array
// and returns true if the values are within the
// specified range. This range can only be changed
// if the constant var is changed. Otherwise,
// the value will not be able to change.
// This is the first condition that we must check
// to verify if the array is a Lo Shu magic square.
bool checkRange(int array[][COLS])
{
	// *COMMENT TWO*
	// the for loop steps through the entire array,
	// and inside it has an if statement that says
	// if the array at index [r][c] and greater than or
	// equal to the MIN value AND the array at index
	// [r][c] is less than or equal to the MAX value
	for (int r = 0; r < ROWS; r++)
		for(int c = 0; c < COLS; c++)
			if(array[r][c] >= MIN and array[r][c] <= MAX)
				return true;
	return false;

}

// *COMMENT THREE*
// checkUnique() function receives a 2D int array, and
// returns true if the values in the array are all
// different. If the values have any duplicates, then
// the function returns false. This is second condition
// that we must check to verify if the array is a Lo Shu
// magic square.
bool checkUnique(int array[][COLS])
{
	// *COMMENT FOUR*
	// the for loop steps through the entire array
	// the check if an array index has the same
	// value as another array index.
	// Returns false if any elements are the same.
	for (int i = 1; i < ROWS; i++)
		for (int j = 0; j < i; j++)
			if (array[i][j] == array[j][i])
				return false;
	return true;
}

// *COMMENT FIVE*
// checkRowSum() function receives a 2D int array,
// and checks to see if each row, adds up to the
// same value. If this is the case, the function
// returns true. if the sum of each row is NOT the
// same, the function returns false.
bool checkRowSum(int array[][COLS])
{
	double sum = 0;
	int rowSum = 0;

	// *COMMENT SIX*
	// the for loops step through each row.
	// instead of having the for loop step through
	// from 0 to ROWS then 0 to COLS, we set both
	// nested loops to run until the number of ROWS.
	// this ensures we are counting through the
	// rows, and not the columns. This nested for loop
	// uses the counter var rowSum to add up each row
	// in the array. it is then divided by 3 to then
	// later be compared.
	for (int r = 0; r < ROWS; r++)
		for (int c = 0; c < ROWS; c++)
			rowSum += array[r][c];

	rowSum = rowSum / 3; //it is necessary to divide the rowSum by 3
						// because this will give us what each row's
						// value should be if they all have the same
						// amount.

	// *COMMENT SEVEN*
	// this for loop steps through first 0 to ROWS value
	// then re-initializes sum to 0. then, the inner for
	// loop steps through the rows, using a c variable,
	// and adds up all of the rows.
	for (int r = 0; r < ROWS; r++)
	{
		sum = 0;
		for (int c = 0; c < ROWS; c++)
			sum += array[r][c];
	}

	// *COMMENT EIGHT*
	// this if statement compares using the assignment operator
	// if sum's value is equal to rowSum's value. if they are equal,
	// the function returns true, if they have different values,
	// the function returns false.
	if(sum == rowSum)
		return true;
	else
		return false;
}

// *COMMENT NINE*
// checkColSum() function receives a 2D int array,
// and checks to see if each column, adds up to the
// same value. If this is the case, the function
// returns true. if the sum of each column is NOT the
// same, the function returns false.
bool checkColSum(int array[][COLS])
{
	double sum = 0;
	int colSum = 0;

	// *COMMENT TEN*
	// the for loops step through each column.
	// instead of having the for loop step through
	// from 0 to ROWS then 0 to COLS, we set both
	// nested loops to run until the number of COLS.
	// this ensures we are counting through the
	// columns, and not the rows. This nested for loop
	// uses the counter var colSum to add up each column
	// in the array. it is then divided by 3 to then
	// later be compared.
	for (int r = 0; r < COLS; r++)
		for (int c = 0; c < COLS; c++)
			colSum += array[r][c];
	colSum = colSum / 3;

	for (int r = 0; r < ROWS; r++)
	{
		sum = 0;
		for (int c = 0; c < ROWS; c++)
			sum += array[r][c];
	}

	if(sum == colSum)
		return true;
	else
		return false;

}

// *COMMENT ELEVEN*
// checkDiagSum() function receives a 2D int array,
// it adds together the diagonals and tests to see if
// they are equal to eachother. if they are equal,
// the function returns true, if they are not
// equal and have different values, it will return false.
bool checkDiagSum(int array[][COLS])
{
	int sumDiag1 = 0, sumDiag2 = 0;
	for(int r = 0, c = 0; r < ROWS; r++, c++)
		sumDiag1 += array[r][c];

	for(int r = 0; r < ROWS; r++)
		sumDiag2 += array[r][COLS-r-1];

	if(sumDiag1 == sumDiag2)
		return true;
	else
		return false;
}
