//============================================================================
// Name        : PA #2 Rock Paper Scissors
// Author      : Elise Zur
//============================================================================

#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

const int ROCK = 1;
const int PAPER = 2;
const int SCISSORS = 3;
const int QUIT = 4;

int getComputerChoice();
int getUserChoice();
void displayChoice(int);
void determineOutcome(int, int);


int main()
{
	int userChoice;
	int computerChoice;

	// *COMMENT ONE*
	// The function getComputerChoice() is called to receive the
	// computer's game choice. The variable computerChoice
	// is assigned to the function in order to receive
	// the return value, and store it as another variable
	// that the program can use inside of main.
	computerChoice = getComputerChoice();

	// *COMMENT TWO*
	// The same method is used to store the return value from
	// getUserChoice() into a variable named userChoice.
	// userChoice holds the value that the user typed
	// into the console regarding the game menu.
	userChoice = getUserChoice();

	// *COMMENT THREE*
	// A while loop is used to have the game continue to loop
	// until the condition is met. The user must enter 4 (QUIT)
	// in order to end the program.
		while (userChoice != QUIT)
		{
			// *COMMENT FOUR*
			// displayChoice(userChoice) and displayChoice(computerChoice)
			// are both the same functions, with two different parameters.
			// (1) displayChoice(userChoice) function uses the variable
			// userChoice to display what the user chose from the game menu.
			cout << "\nYou selected: ";
			displayChoice(userChoice);

			// *COMMENT FIVE*
			// (2) displayChoice(computerChoice) function uses the variable
			// computerChoice to display what the computer chose from the
			// game menu. The program uses a cout statement to easily
			// show the difference between the two functions,
			// instead of having to make 2 separate functions.
			cout << "The computer selected: ";
			displayChoice(computerChoice);

			// *COMMENT FIVE*
			// determineOutcome(userChoice, computerChoice) calls both variables
			// that were assigned to their respective functions. This enables
			// the program to be able to determine who has won, the computer
			// or the user. There is an option for a tie, in which both sides
			// chose the same option from the menu.
			determineOutcome(userChoice, computerChoice);
			cout << endl;

			// *COMMENT SIX*
			// It is necessary to repeat code from line 33 and 40 because once
			// the program has entered the while loop, there is no other way
			// for the program to continue receiving input and randomizing
			// the computer's choice. It must be repeated at the end of the
			// code to continue the program's repeating loop.
			computerChoice = getComputerChoice();
			userChoice = getUserChoice();
		}

	cout << "Program is ending...";

	return 0;
}


// ********************************************************
// The getComputerChoice function returns the computer's  *
// game choice. It returns 1 for rock (via the ROCK       *
// constant), or 2 for paper (via the PAPER constant),    *
// or 3 for scissors (via the SCISSORS constant).         *
// ********************************************************
int getComputerChoice()
{
	int number = rand()% (3) + 1;

	// *COMMENT SEVEN*
	// Rather than simply returning an integer, we are returning
	// a CONST int. As each of these constants are already
	// defined above, we can easily call upon the values
	// and utilize the "equal to" operator.
	if (number == 1)
		return ROCK;
	if (number == 2)
		return PAPER;
	if (number == 3)
		return SCISSORS;
}


// ********************************************************
// The getUserChoicefunction displays a menu allowing     *
// the user to select rock, paper, or scissors. The       *
// function then returns 1 for rock (via the ROCK         *
// constant), or 2 for paper (via the PAPER constant),    *
// or 3 for scissors(via the SCISSORS constant),          *
// or 4 for quit (via the QUIT constant).                 *
// ********************************************************
int getUserChoice()
{
	int userChoice;

	cout << "\nGame Menu:\n";
	cout << "\n1) Rock" << endl;
	cout << "2) Paper" << endl;
	cout << "3) Scissors" << endl;
	cout << "4) Quit" << endl;

	cout << "\nEnter your choice: ";
	cin >> userChoice;

	// *COMMENT EIGHT*
	// The while loop here is used for input validation.
	// This loop reads that while the user inputs
	// a value less than 1, greater than 4, or an input
	// failure occurs. In this case, when the input is
	// not an integer. It then clears the buffer and allows
	// the loop of asking for a valid response of
	// 1, 2, 3, or 4.
	while(userChoice < 1 or userChoice > 4 or cin.fail())
	{
		if (cin.fail())
		{
			cin.clear();
			cin.ignore(1000,'\n');
		}
		cout << "\t> Invalid response. Enter 1, 2, 3, or 4: ";
		cin >> userChoice;
	}

	if (userChoice == 1)
		return ROCK;
	if (userChoice == 2)
		return PAPER;
	if (userChoice == 3)
		return SCISSORS;
	if (userChoice == 4)
		return QUIT;
}


// ********************************************************
// The displayChoicefunction accepts an integer argument  *
// and displays rock, paper, or scissors.                 *
// ********************************************************
void displayChoice(int choice)
{
	if (choice == ROCK)
		cout << "Rock" << endl;
	if (choice == PAPER)
		cout << "Paper" << endl;
	if (choice == SCISSORS)
		cout << "Scissors" << endl;
}


// **********************************************************
// The determineOutcome function accepts the user's game    *
// choice and the computer's game choice as arguments		*
// and displays a message indicating the winner             *
// or that a tie occurred.                                  *
// **********************************************************
void determineOutcome(int user, int computer)
{
	// *COMMENT NINE*
	// Utilize if statements in order to display the outcome
	// of the round. When one player chooses rock and
	// the other player chooses scissors, rock wins because
	// rock smashes scissors.
	if (user == ROCK and computer == SCISSORS)
		cout << "YOU win! Rock smashes scissors.";
	if (user == SCISSORS and computer == ROCK)
		cout << "Computer wins! Rock smashes scissors.";


	// *COMMENT TEN*
	// Utilize if statements in order to display the outcome
	// of the round. When one player chooses scissors & other
	// player chooses paper, scissors wins because
	// scissors cuts paper.
	if (user == SCISSORS and computer == PAPER)
		cout << "YOU won! Scissors cuts paper.";
	if (user == PAPER and computer == SCISSORS)
		cout << "Computer wins! Scissors cuts paper.";

	// *COMMENT ELEVEN*
	// Utilize if statements in order to display the outcome
	// of the round. When one player chooses paper & other
	// player chooses rock, paper wins because paper
	// wraps rock.
	if (user == PAPER and computer == ROCK)
		cout << "YOU won! Paper wraps rock.";
	if (user == ROCK and computer == PAPER)
		cout << "Computer wins! Paper wraps rock.";

	// *COMMENT TWELVE*
	// Utilize if statements to display the outcome of a tie
	// if both the user and computer choose the same options
	// from the menu.
	if ((user == ROCK and computer == ROCK) or
		(user == PAPER and computer == PAPER) or
		(user == SCISSORS and computer == SCISSORS))
		cout << "Tie. No winner.";
}

