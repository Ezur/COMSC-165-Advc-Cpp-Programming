//============================================================================
// Name        : PA #8 Teams who have WorldSeries
// Author      : Elise Zur
//============================================================================

#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <iomanip>

using namespace std;

void readFile(vector<string> &, ifstream&);
void displayTeams(const vector<string> &);
string promptUser(const vector<string> &);
int countWins(const vector<string> &, string);
void displayWins(string, int);


int main()
{
	ifstream teams_fin ("Teams.txt");
	ifstream winners_fin ("Winners.txt");

	vector<string> teams;
	vector<string> winners;

	string team_name = " ";

	// console output
	readFile(teams, teams_fin);
	readFile(winners, winners_fin);
	displayTeams(teams);

	// user input & computations
	string userInput = promptUser(teams);
	int count = countWins(winners, userInput);
	displayWins(userInput, count);

	return 0;
}

// *COMMENT ONE*
// readFile() recieves a vector and a file input object, name_fin.
// The function's purpose is to read / traverse through the file
// and insert each line of the file into a vector.
void readFile(vector<string> &vec, ifstream& name_fin)
{
	string team_name = " ";

	// *COMMENT TWO*
	// this is file validation. if the name is correct and there
	// are no problems accessing the file, then this code is
	// stepped over. if the file name is typed wrong or there
	// are issues accessing, then this code outputs to the console
	// that there is an error with the file. this helps us pin-
	// point where there are bugs in our code.
	if (!name_fin)
	{
		cout << "ERROR...can't open file";
		return;
	}

	// *COMMENT THREE*
	// this while loop actively reads the file while pushing
	// the string into the vector. according to main, we can
	// do this with any file object and vector. it is not
	// hard coded to one specific file / vector.
	while(name_fin)
	{
		getline(name_fin, team_name);
		vec.push_back(team_name);
	}
}

// *COMMENT FOUR*
// displayTeams() will write to the console a table of team names.
// the name are organized in rows, or 3 per column and left-aligned.
void displayTeams(const vector<string> &vec)
{
	cout << "The following teams have won the World"
			"Series at least once: " << endl << endl;

	// *COMMENT FIVE*
	// this for loop steps through the amount of times that is
	// the vector's size minus one to account for the off by
	// one error. inside the loop, there are manipulators.
	for (int i = 0; i < vec.size()-1; i++)
	{
		cout << left << setw(20) << vec[i] << "\t\t";

		// *COMMENT SIX*
		// this if statement says if the index i + 1 (accounts for
		// off by one error) modulus 3 and it equals to 0, then it
		// will start a new line. this translates to, if the value
		// is a multiple of 3, it should have a remainder of 0.
		if (((i+1) % 3) == 0 and (i != 0))
		{
			cout << endl;
		}
	}
}

// *COMMENT SEVEN*
// promptUser() requests information from the user. it requests
// the user to input the name of one of the teams that is presented
// from displayTeams() above. we use getline because there are
// multiple words to be inputed and so we need something that will
// read without reading the whitespace.
string promptUser(const vector<string> &teams)
{
	string input = " ";
	int count = 0;

	cout << "\n\nEnter the name of one of the teams: ";
	getline(cin, input);

	// *COMMENT EIGHT*
	// the for loop steps through the number of times equal to
	// the teams vector. there is an if statement to check if
	// the user input is equal to the team vector at index i,
	// then increase the count variable by one.
	for (int i = 0; i < teams.size(); i++)
	{
		if(input == teams[i])
			count++;
	}

	// *COMMENT NINE*
	// here is an input validation. if count is 0 then that means
	// the user's input was never found in the vector. if that is
	// case, then the console will present the user a chance to
	// re-enter their input.
	if (count == 0)
	{
		cout << "Error...please make sure spelling is correct.\nTry again...";
		getline(cin, input);
	}

	return input;
}

// *COMMENT TEN*
// countWins() displays to the console the number of times the team
// won the world series. the function does this by checking to see
// the number of times the user input was found in the list of winners.
// depending on the number, that is how many times the team has
// won the world series.
int countWins(const vector<string> &winners, string userInput)
{
	int count = 0;
	for (int i = 0; i < winners.size(); i++)
	{
		if(userInput == winners[i])
			count++;
	}
	return count;
}

void displayWins(string userInput, int count)
{
	cout << "The " << userInput << " have won the World Series "
		 << count << " times between 1903 and 2012." << endl;
}
